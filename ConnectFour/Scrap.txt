

        //// Returns enumerator for the up-right diagonal containing (col, row)
        //public IEnumerable<Token> UpRightDiag(int col, int row)
        //{
        //    return UpRightDiagonal(col - row);
        //}


        //// Returns enumerator for the numbered up-right diagonal
        //public IEnumerable<Token> UpRightDiagonal(int diag)
        //{
        //    // Get the starting row/column for this diagonal
        //    (int col, int row) = (diag >= 0) ? (diag, 0) : (0, -diag);

        //    // Iterate through each token in this diagonal
        //    while (col < Cols && row < Rows)
        //    {
        //        yield return tokens[col++, row++];
        //    }
        //}


        //// Returns enumerator for the up-left diagonal containing (col, row)
        //public IEnumerable<Token> UpLeftDiag(int col, int row)
        //{
        //    return UpLeftDiagonal((Cols - col - 1) - row);
        //}


        //// Returns enumerator for the numbered up-left diagonal
        //public IEnumerable<Token> UpLeftDiagonal(int diag)
        //{
        //    // Get the starting row/column for this diagonal
        //    (int col, int row) = (diag >= 0) ? (Cols - diag - 1, 0) : (0, -diag);

        //    // Iterate through each token in this diagonal
        //    while (col > 0 && row < Rows)
        //    {
        //        yield return tokens[col--, row++];
        //    }
        //}


        //// Returns enumerator for the numbered row
        //public IEnumerable<Token> Row(int row)
        //{
        //    for (int col = 0; col < Cols; col++)
        //    {
        //        yield return tokens[col, row];
        //    }
        //}


        //// Returns enumerator for the numbered column
        //public IEnumerable<Token> Col(int col)
        //{
        //    for (int row = 0; row < Rows; row++)
        //    {
        //        yield return tokens[col, row];
        //    }
        //}

